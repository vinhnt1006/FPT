while True:
    try:
        number = int(input("Enter a positive integer number: "))
    except ValueError:
        print("The number must be a positive number.")
    else:
        if number < 0:
            print("The number must be positive.")
        else:
            print("The prime numbers from 0 to", number, end=": \n")
            for i in range(2, number):
                for j in range(2, int(i**0.5 + 1)):
                    if i % j == 0:
                        break
                else:
                    print(i, end=" ")
            break
==========
bigNumber = None
smallNumber = None

while True:
    number = input()
    if number == "done":
        break
    try:
        number = int(number)
        if bigNumber == None or bigNumber < number: bigNumber = number
        if smallNumber == None or smallNumber > number: smallNumber = number
    except ValueError:
        print("Invalid input")
        continue

print("Maximum is", bigNumber)
print("Minimum is", smallNumber)
==========
while True:
    number = input("Enter a positive number: ")
    try:
        number = int(number)
        if number < 0:
            print("The number must be positive.")
            continue
        else:
            print("The perfect numbers from 0 to", number, end=": \n")
            for i in range(6, number):
                sum = 0
                for j in range (1, int(i/2 + 1)):
                    if i % j == 0:
                        sum += j
                if sum == i:
                    print(i, end=" ")
        break
    except ValueError:
        print("The number must be a positive number.")
        continue
==========
while True:
    try:
        number = int(input("Enter a positive integer number: "))
    except ValueError:
        print("The number must be a positive number.")
    else:
        if number < 0:
            print("The number must be positive.")
        else:
            print("The Fibonacci sequence of", number, end=": \n")
            print(0, 1, end = " ")
            f1 = 0
            f2 = 1
            for i in range(2, number):
                # #print(f2, end = " ")
                # f1 = f1 + f2
                # f2 = f1 + f2
                # print(f1, f2, end = " ")
                print(f1 + f2, end = " ")
                f2 += f1
                f1 = f2 - f1
        break
==========
def gcd(a, b):
  if b == 0:
    return (a, 1, 0)
  else:
    d, x, y = gcd(b, a % b)
    x, y = y, x - (a // b) * y
    return (d, x, y)

num1 = None
num2 = None

while num1 is None or num2 is None:
  try:
    num = int(input("Enter a positive integer number: "))
    if num > 0:
      if num1 is None:
        num1 = num
      else:
        num2 = num
        break
    else:
      print("The number must be positive.")
  except ValueError:
    print("The number must be a positive number.")

d, x, y = gcd(num1, num2)
print(f"GCD of {num1}, {num2} is {d}")

==========
count = 0
total = 0
average = 0

while True:
    try:
        num = input("Enter a number or 'done': ")
        if num == 'done':
            break
        num = int(num)
        if num % 2 == 0:
            count += 1
            total += num
    except ValueError:
        print("Invalid input. Please enter a number or 'done'.")

if count != 0:
    average = total / count

print(f"Number of even numbers: {count}")
print(f"Sum of even numbers: {total}")
print(f"Average of even numbers: {average}")
==========
def is_prime(n):
  if n == 1:
    return False
  if n == 2:
    return True
  if n % 2 == 0:
    return False
  for i in range(3, int(n**0.5) + 1, 2):
    if n % i == 0:
      return False
  return True

def next_prime(n):
  n = n + 1
  while not is_prime(n):
    n = n + 1
  return n

current_prime = 2

print(current_prime)

user_input = input("Type 1 if you want next prime number otherwise type 0: ")

while user_input != "0":
  
  if user_input == "1":
    current_prime = next_prime(current_prime)
    print(current_prime)
  
  else:
    print("Invalid input. Please enter either 1 or 0.")
  
  user_input = input("Type 1 if you want next prime number otherwise type 0: ")

print("Exit program!")
==========
def int_to_hex(n):
  hex_digits = ""
  hex_map = {0: "0", 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9",
             10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F"}
  while n > 0:
    remainder = n % 16
    hex_digits = hex_map[remainder] + hex_digits
    n = n // 16
  return hex_digits

while True:
  try:
    num = int(input("Enter a positive integer number: "))
    if num > 0:
      hex_num = int_to_hex(num)
      print(f"{num} is converted into hexadecimal: {hex_num}")
      break
    else:
      print("The number must be positive.")
  except ValueError:
    print("The input must be a positive integer.")
==========
def computepay(hours, rate):
  if hours > 40:
    extra_hours = hours - 40
    extra_pay = extra_hours * rate * 1.5
    pay = 40 * rate + extra_pay
  else:
    pay = hours * rate
  return pay

hours = float(input("Enter hours: "))
rate = float(input("Enter rate: "))

pay = computepay(hours, rate)

print("Pay:", pay)
==========
def decimal_to_binary(n):
  binary = ""
  while n > 0:
    binary = str(n % 2) + binary
    n = n // 2
  return binary

while True:
  try:
    num = int(input("Enter a positive integer number: "))
    if num > 0:
      print(num, "is converted into binary:", decimal_to_binary(num))
      break
    else:
      print("The number must be positive.")
  except:
    print("The input must be a valid number.")
==========
def Anagram(s1, s2):
  s1 = s1.lower()
  s2 = s2.lower()
  s1 = sorted(s1)
  s2 = sorted(s2)
  if s1 == s2:
    return True
  else:
    return False

s1 = input("Enter the first string: ")
s2 = input("Enter the second string: ")

result = Anagram(s1, s2)

print(f"Anagram('{s1}', '{s2}'):", result)
==========
def is_valid(password):
  if len(password) < 6 or len(password) > 12:
    return False
  if not any(char.islower() for char in password):
    return False
  if not any(char.isupper() for char in password):
    return False
  if not any(char.isdigit() for char in password):
    return False
  if not any(char in "$#@" for char in password):
    return False
  return True

passwords = input("Enter passwords: ").split(",")

valid_passwords = []

for password in passwords:
  if is_valid(password):
    valid_passwords.append(password)

print("Valid passwords: ", ",".join(valid_passwords))
==========
def gcd(a, b):
  if b == 0:
    return a
  else:
    return gcd(b, a % b)

num1 = None
num2 = None

while num1 is None or num2 is None:
  try:
    num = int(input("Enter a positive integer number: "))
    if num > 0:
      if num1 is None:
        num1 = num
      else:
        num2 = num
        break
    else:
      print("The number must be positive.")
  except ValueError:
    print("The number must be a positive number.")

print(f"GCD of {num1}, {num2} is {gcd(num1, num2)}")
==========
def sieve_of_eratosthenes(limit):
  prime = [True for i in range(limit + 1)]
  p = 2
  while p * p <= limit:
    if prime[p]:
      for i in range(p * p, limit + 1, p):
        prime[i] = False
    p += 1
  
  return [p for p in range(2, limit + 1) if prime[p]]

def next_prime(n):
  n = n + 1
  while True:
    primes = sieve_of_eratosthenes(n)
    if n in primes:
      return n
    else:
      n += 1

current_prime = 2

print(current_prime)

user_input = input("Type 1 if you want next prime number otherwise type 0: ")

while user_input != "0":
  
  if user_input == "1":
    current_prime = next_prime(current_prime)
    print(current_prime)
  
  else:
    print("Invalid input. Please enter either 1 or 0.")
  
  user_input = input("Type 1 if you want next prime number otherwise type 0: ")

print("Exit program!")
==========
# import re

# fname = input("Enter file:")

# fhand = open(fname, 'r')

# list = []

# print("Troubleshoot wired LAN related issues:")

# for line in fhand:
#     line = line.rstrip()
#     if line.startswith("Name: "):
#         name = line[6:].split("-")[0]
#         list.append(name)

# def countFreq(mylist):
#     freq = {}

#     for item in mylist:
#         if item in freq:
#             freq[item] += 1
#         else:
#             freq[item] = 1
    
#     for count in sorted(freq):
#         print(str(count) + ": " + str(freq[count]))

# countFreq(list)


# # import re
# # fname = input('Enter file:')

# # fhand = open(fname, "r")

# # l = []

# # print("Troubleshoot wired LAN related issues: ")

# # for line in fhand:
# #     line = line.rstrip()
# #     if line.startswith('Name: '):
# #         name = line[6:].split("-")[0]
# #         l.append(name)
    
# # def countFreq(mylist):
# #     freq = {}
# #     for item in mylist:
# #         if (item in freq):
# #             freq[item] += 1
# #         else:
# #             freq[item] = 1
    
# #     for i in sorted(freq):
# #         print(str(i) + ": " + str(freq[i]))

# # countFreq(l)

import re

fname = input("Enter file:")

fhand = open(fname, 'r')

list = []

print("Troubleshoot wired LAN related issues:")

for line in fhand:
    line = line.rstrip()
    if line.startswith("Name: "):
        line = line[6:].split("-")[0]
    list.append(line)

def countFreq(mylist):
    freq = {}
    for item in mylist:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    for item in sorted(freq):
        print(str(item) + ": " + str(freq[item]))

countFreq(list)
==========
d = dict()
lst = list()

fname = input('enter the file name : ')
try:
    fopen = open(fname,'r')
except:
    print('wrong file name !!!')

for line in fopen:

    stline = line.strip()
    
    if stline.startswith('From:'):
        continue
    elif stline.startswith('From'):
        spline = stline.split()
        
        time = spline[5]
        tsplit = time.split(':')
        
        t1 = tsplit[0].split()
        
        for t in t1:
            if t not in d:
                d[t] = 1
            else:
                d[t] = d[t] + 1

for k,v in d.items():
    lst.append((k,v))
lst = sorted(lst)

for k,v in lst:
    print(k,v)
==========
import re

fname = input("Enter file:")

fhand = open(fname, 'r')

list = []

for DNS in fhand:
    DNS = DNS.strip()
    if DNS.startswith("Location: "):
        DNS = DNS[10:].split()[0]
    else:
        continue
    list.append(DNS)

def countFreq(mylist):
    freq = {}

    for item in mylist:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    
    for item in sorted(freq):
        print(str(item) + ": " + str(freq[item]))

countFreq(list)
==========
import re

fname = input("Enter file:")

fhand = open(fname, 'r')

list = []

print("Course Summary:")

for line in fhand:
    line = line.rstrip()
    if line.startswith("Name: "):
        line = line[6:].split("-")[0]
    list.append(line)

def countFreq(mylist):
    freq = {}
    for item in mylist:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    for item in sorted(freq):
        print(str(item) + ": " + str(freq[item]))

countFreq(list)
==========
file = open("mbox-short.txt")
counts = dict()

for line in file:
    line = line.strip()
    if line.startswith('From: '):
        continue
    elif line.startswith('From '):
        words = line.split()
        time = words[5]
        parts = time.split(":")
        hour = parts[0]
        counts[hour] = counts.get(hour, 0) + 1

lst = list(counts.items())

lst.sort()

for hour, count in lst:
    print(hour, count)
==========
import re

fname = input("Enter file:")

fhand = open(fname, 'r')

list = []

for DNS in fhand:
    DNS = DNS.strip()
    if DNS.startswith("Location: "):
        DNS = DNS[10:].split()[0]
    else:
        continue
    list.append(DNS)

print("DNS server list\nCountry Count")

def countFreq(mylist):
    freq = {}

    for item in mylist:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    
    for item in sorted(freq):
        print(str(item) + ": " + str(freq[item]))

countFreq(list)
==========
def is_ordered(word):
  word = word.lower()
  for i in range(len(word) - 1):
    if word[i] > word[i + 1]:
      return False
  return True

filename = input("Enter file: ")
file = open(filename, "r")
text = file.read()
file.close()

words = text.split()

ordered_words = []

for word in words:
  if is_ordered(word):
    ordered_words.append(word)

print("The ordered words:")
print(ordered_words)
==========
fname = input("Enter file name: ")

fhandle = open(fname)

count = 0
total = 0

for line in fhandle:
    if line.startswith("X-DSPAM-Confidence:"):
        value = float(line[line.find(":")+1:].strip())
        count += 1
        total += value

average = total / count

print("Average spam confidence:", average)
==========
import re

fname = input("Enter file:")

fhand = open(fname, 'r')

list = []

print("Troubleshoot wired LAN related issues:")

for line in fhand:
    line = line.rstrip()
    if line.startswith("Name: "):
        line = line[6:].split("-")[0]
    list.append(line)

def countFreq(mylist):
    freq = {}
    for item in mylist:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    for item in sorted(freq):
        print(str(item) + ": " + str(freq[item]))

countFreq(list)
==========
fname = input("Enter file name: ")

fhandle = open(fname)

count = 0
total = 0

for line in fhandle:
    if line.startswith("X-DSPAM-Confidence:"):
        value = float(line[line.find(":")+1:].strip())
        count += 1
        total += value

average = total / count

print("Average spam confidence:", average)
==========
# class Student:
#     def __init__(self, name, age, scores):
#         self.name = name
#         self.age = age
#         self.scores = scores

#     def __str__(self):
#         return f"Name= {self.name}, Age= {self.age}, Scores= {self.scores}"

#     def __lt__(self, other):
#         return self.name < other.name

# students = [
#     Student("John", 20, 80),
#     Student("Anish", 21, 50),
#     Student("Berry", 22, 87),
#     Student("Patrick", 20, 90),
#     Student("Alexa", 19, 84),
#     Student("Cindy", 25, 96),
#     Student("Sandy", 16, 76),
#     Student("Tom", 18, 75),
#     Student("Jerry", 17, 79)
# ]

# print("Before Sorting")
# for student in students:
#     print(student)

# students.sort()

# print("\nAfter Sorting")
# for student in students:
#     print(student)

class Student:
    def __init__(self, name, age, scores):
        self.name = name
        self.age = age
        self.scores = scores

    def __repr__(self):
        return f"Name= {self.name}, Age= {self.age}, Scores= {self.scores}"

students = [
    Student("John", 20, 80),
    Student("Anish", 21, 50),
    Student("Berry", 22, 87),
    Student("Patrick", 20, 90),
    Student("Alexa", 19, 84),
    Student("Cindy", 25, 96),
    Student("Sandy", 16, 76),
    Student("Tom", 18, 75),
    Student("Jerry", 17, 79)
]

print("Before Sorting")
print(*students, sep="\n")

students.sort(key=lambda student: student.name)

print("\nAfter Sorting")
print(*students, sep="\n")
==========
file = open("List.txt", "r")

text = file.read()

numbers = text.split()

sum = 0
count = 0
avg = 0

for number in numbers:
    num = int(number)
    if num % 2 == 0:
        sum += num
        count += 1

if count != 0:
    avg = sum / count

print("Avg =", avg)

file.close()
==========
import sqlite3

conn = sqlite3.connect("Counts.sqlite")

cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS Counts;
''')
cur.execute("CREATE TABLE Counts (org TEXT, count INTEGER)")

with open("mbox-short.txt", "r") as f:
    for line in f:
        if not line.startswith("From:"):
            continue
        email = line.split()[1]
        org = email.split("@")[1]
        cur.execute("SELECT count FROM Counts WHERE org = ?", (org,))
        row = cur.fetchone()
        if row is None:
            cur.execute("INSERT INTO Counts (org, count) VALUES (?, 1)", (org,))
        else:
            cur.execute("UPDATE Counts SET count = count + 1 WHERE org = ?", (org,))

conn.commit()

print("Counts")
print("Org\tCount")

cur.execute("SELECT org, count FROM Counts ORDER BY count DESC")

rows = cur.fetchall()

for row in rows:
    org, count = row
    print(org + "\t" + str(count))

cur.close()
conn.close()
==========
import sqlite3

conn = sqlite3.connect("dbmovieList.sqlite")
cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS MovieList;
''')
cur.execute('''
    CREATE TABLE MovieList(
        MovieID TEXT,
        length INTEGER,
        Des TEXT
    );
''')

with open("MovieList.txt") as f:
    lines = f.readlines()

tmp = 0

for line in lines:
    tmp += 1
    if tmp == 1:
        continue
    movieID, length = line.split()
    movieID = movieID.strip()
    length = length.strip()

    if movieID.startswith("Act"):
        des = "Action Movie"
    else:
        des = "Scientific Movie"

    cur.execute("INSERT INTO MovieList (movieID, length, Des) VALUES (?, ?, ?)", (movieID, length, des))

conn.commit()

cur.execute("SELECT * FROM MovieList ORDER BY length DESC LIMIT 3")

results = cur.fetchall()
for result in results:
    print(result)

conn.close()
==========
import sqlite3
from prettytable import PrettyTable

conn = sqlite3.connect("Product.sqlite")

cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS Product;
''')
cur.execute("CREATE TABLE Product (Name TEXT, Quantity INTEGER, Price REAL, Total REAL, Discount REAL)")

cur.execute("DELETE FROM Product")

tmp = 0

with open("data.txt", "r") as f:
    f.readline()
    for line in f:
        tmp += 1
        if tmp == 1:
            continue
        tmp2 = line.split()
        price = float(tmp2[len(tmp2)-1])
        quantity = int(tmp2[len(tmp2)-2])
        name = ""
        qq = 0
        for c in tmp2:
            name = name + c
            qq += 1
            if qq == len(tmp2) - 2:
                break
        total = quantity * price
        if total > 70000000:
            discount = 0.1 * total
        else:
            discount = 0
        cur.execute("INSERT INTO Product (Name, Quantity, Price, Total, Discount) VALUES (?, ?, ?, ?, ?)", (name, quantity, price, total, discount))

conn.commit()

# print("Product list")
# print("Name\tQuantity\tPrice\tTotal\tDiscount")

# cur.execute("SELECT * FROM Product ORDER BY Quantity DESC")

# rows = cur.fetchall()

# for row in rows:
#     name, quantity, price, total, discount = row
#     print(f"{name}\t{quantity}\t{price}\t{total}\t{discount}")

# cur.close()
# conn.close()


table = PrettyTable(['Name', 'Quantity', 'Price', 'Total', 'Discount'])
cur.execute("SELECT * FROM Product ORDER BY Quantity DESC;")
dns_servers = cur.fetchall()
for server in dns_servers:
	table.add_row(server)

print("Product list:")
print(table)
==========
import sqlite3

conn = sqlite3.connect("Wage.sqlite")

cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS Wage;
''')
cur.execute('''
    CREATE TABLE Wage (
        Name TEXT, 
        Hours INTEGER, 
        Rate INTEGER, 
        Total DOUBLE, 
        Tax DOUBLE
        );
''')

tmp = 0

with open("Database.txt", "r") as f:
    for line in f:
        tmp += 1
        if tmp == 1:
            continue
        name, hours, rate = line.split()
        hours = int(hours)
        rate = int(rate)
        total = hours * rate
        if total >= 2000000:
            tax = total * 0.1
        else:
            tax = 0
        cur.execute("INSERT INTO Wage (Name, Hours, Rate, Total, Tax) VALUES (?, ?, ?, ?, ?)", (name, hours, rate, total, tax))

conn.commit()

print("Lectures wage")
print("Name\tHours\tRate")

cur.execute("SELECT Name, Hours, Rate FROM Wage WHERE Hours > 5 ORDER BY Hours ASC")

rows = cur.fetchall()

for row in rows:
    name, hours, rate = row
    print(name + "\t" + str(hours) + "\t" + str(rate))

cur.close()
conn.close()
==========
import sqlite3

conn = sqlite3.connect("employee.sqlite")
cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS employee;
''')
cur.execute("CREATE TABLE employee (Name TEXT, rate REAL, salary INTEGER, Total INTEGER, Tax INTEGER)")

tmp = 0

with open("Data.txt") as f:
    for line in f:
        tmp += 1
        if tmp == 1:
            continue
        name, rate, salary = line.split()
        rate = float(rate)
        salary = int(salary)
        total = rate * salary
        if total >= 9000000:
            tax = total * 0.05
        else:
            tax = 0
        cur.execute("INSERT INTO employee VALUES (?, ?, ?, ?, ?)", (name, rate, salary, total, tax))

conn.commit()

print("employee list:")
print("Name\t rate\t salary\t total\t tax")
cur.execute("SELECT * FROM employee WHERE rate > 3 ORDER BY Name")
for row in cur:
    print("\t".join(str(x) for x in row))

conn.close()
==========
import sqlite3

conn = sqlite3.connect("Scholar.sqlite")

cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS Student;
''')
cur.execute("CREATE TABLE Student (Name TEXT, term INTEGER, grade REAL, Scholar TEXT)")

tmp = 0

with open("Data2.txt", "r") as f:
    for line in f:
        tmp += 1
        if tmp == 1:
            continue
        name, term, grade = line.split()
        term = int(term)
        grade = float(grade)
        if grade >= 8:
            scholar = "A"
        elif grade >= 7:
            scholar = "B"
        else:
            scholar = None
        cur.execute("INSERT INTO Student (Name, term, grade, Scholar) VALUES (?, ?, ?, ?)", (name, term, grade, scholar))

conn.commit()

cur.execute("SELECT * FROM Student ORDER BY grade DESC")

rows = cur.fetchall()

print("Scholar list:")

print("Name\tterm\tgrade\tScholar")
for row in rows:
    print("\t".join(str(x) for x in row))

cur.close()
conn.close()
==========
import sqlite3

conn = sqlite3.connect("Wage2.sqlite")

cur = conn.cursor()

cur.execute('''
    DROP TABLE IF EXISTS Grade;
''')
cur.execute("CREATE TABLE Grade (Name TEXT, Course TEXT, NumOfAs INTEGER, Price INTEGER, Total INTEGER, Tax INTEGER)")

f = open("Database2.txt", "r")

tmp = 0

for line in f:
    tmp += 1
    if tmp == 1:
        continue
    name, course, num_of_as, price = line.split()
    num_of_as = int(num_of_as)
    price = int(price)
    total = num_of_as * price
    if total >= 2000000:
        tax = total * 0.1
    else:
        tax = 0
    cur.execute("INSERT INTO Grade VALUES (?, ?, ?, ?, ?, ?)", (name, course, num_of_as, price, total, tax))

conn.commit()

f.close()

cur.execute("SELECT * FROM Grade WHERE Course = 'Python' ORDER BY NumOfAs LIMIT 3")

rows = cur.fetchall()

print("Name\tCourse\tNumOfAs\tPrice\tTotal\tTax")
for row in rows:
  print("\t".join(str(x) for x in row))

conn.close()
==========
import sqlite3
con = sqlite3.connect("data1.sqlite")
cur = con.cursor()

cur.execute('''
    DROP TABLE IF EXISTS infos;
''')
cur.execute('''
    CREATE TABLE infos(
        procode INTEGER,
          deleted TEXT
    );
''')

file = open("datafile.txt")
num = 0
for line in file:
    num += 1
    if num == 1:
        continue
    data = line.rstrip().split()
    code = int(data[0].rstrip())
    ten = data[1].rstrip()
    dele = data[3].rstrip().lower()
    if (dele == "delete"):
        cur.execute(
            "insert into infos(procode,deleted) values(?,?)", (code, ten))
        con.commit()
cur.execute("select count(procode) from infos")
data = cur.fetchone()
print("so luong dong " + str(data[0]))
cur.execute("select * from infos order by procode DESC limit 3")
data = cur.fetchall()
for line in data:
    print(line)
con.commit()
con.close()
file.close()

==========
import sqlite3
from prettytable import PrettyTable

conn = sqlite3.connect('DNSList.sqlite')
cursor = conn.cursor()

cursor.executescript('''
	DROP TABLE IF EXISTS DNS;
	
	CREATE TABLE DNS(
		IP TEXT NOT NULL,
		Reliability INTEGER,
		Description TEXT
)''')


with open('DNSList.txt') as f:
	lines = f.readlines()

insert_query = "INSERT INTO DNS VALUES(?, ?, ?)"
for line in lines:
	if line.startswith("IP"):
		data3 = line.split(":")
		data4 = data3[1]
	if line.startswith("Reliability:"):
		data = line.split()
		data1 = data[1].split("%")
		if int(data1[0]) < 50:

			cursor.execute(insert_query, (data4, data[1], "Low"))

		else:
			cursor.execute(insert_query,(data4,data[1],"Normal"))

table = PrettyTable(['IP', 'Reliability','Description'])
cursor.execute("SELECT * FROM DNS ORDER BY Reliability DESC;")
dns_servers = cursor.fetchall()
for server in dns_servers:
	table.add_row(server)

print("DNS server list:")
print(table)
===========
import sqlite3

conn = sqlite3.connect('Product.sqlite')

conn.execute('''CREATE TABLE IF NOT EXISTS Product
             (Name TEXT,
             Quantity INTEGER,
             Price REAL,
             Total REAL,
             Discount REAL)''')

with open('data.txt', 'r') as f:
    for line in f:
        data = line.strip().split('\t')
        name, quantity, price = data[0], int(data[1]), float(data[2])
        total = quantity * price
        discount = 0.1 * total if total >= 70000000 else 0
        conn.execute("INSERT INTO Product VALUES (?, ?, ?, ?, ?)",
                     (name, quantity, price, total, discount))

conn.commit()

cursor = conn.execute("SELECT * FROM Product ORDER BY Quantity DESC")
print("{:<10} {:<10} {:<10} {:<10} {:<10}".format("Name", "Quantity", "Price", "Total", "Discount"))
for row in cursor:
    name, quantity, price, total, discount = row
    print("{:<10} {:<10} {:<10,.1f} {:<10,.1f} {:<10,.1f}".format(name, quantity, price, total, discount))

conn.close()
=================
import sqlite3
import re
lines = open("CustomerBills.txt","r")
connect = sqlite3.connect("Bills.sqlite")
connect.executescript(
   '''
   drop table if exists Bill;
   create table Bill(
       ID text not null,
       Name text not null,
       Type text not null,
       NumOfKw integer,
       Price integer,
       Money integer
       );
   '''
)
ID = ""
Name = ""
Type = ""
NumOfKw = 0
Price = 0
Money = 0
for line in lines:
   field = re.split("\\s+",line)
   if(field[0] == "ID"):
       continue
   ID = field[0]
   Name = field[1] +" "+field[2] + " "+field[3]
   Type = field[4]
   NumOfKw = int(field[5])
   if Type == "A":
       Price = 1500
   elif Type == "B":
       Price = 2000
   else:
       Price = 2500
   Money = int(NumOfKw * Price)
   connect.execute('insert into Bill values (?,?,?,?,?,?);',(ID,Name,Type,NumOfKw,Price,Money));
connect.commit()
data = connect.execute('select * from Bill where Money > 150000 order by Money asc;')

print("Customer bill list:")
print("ID".ljust(10,' '),"Full Name".ljust(15,' '),"Type".ljust(10,' '),"NumOfKw".ljust(10,' '),"Price".ljust(10,' '),"Money".ljust(10,' '))
for line in data:
   print(str(line[0]).ljust(10,' '),str(line[1]).ljust(15,' '),str(line[2]).ljust(10,' '),str(line[3]).ljust(10,' '),str(line[4]).ljust(10,' '),str(line[5]).ljust(10,' '))
====================
import sqlite3
import re
lines = open('Student.txt','r')
conn = sqlite3.connect('Student.sqlite')
conn.executescript(
    '''
    drop table if exists Student;
    create table Student(
        Name text not null,
        Course text not null,
        Grade integer,
        Description text not null
    );   
    '''
)
Name = Course = Description = ""
Grade = 0
for line in lines:
    if  re.search('\\d+', line):
        field = re.split('\\s+', line)
        Name = field[1]
        Course = field[0]
        Grade = int(field[2])
        if Grade >= 50:
            Description = "Pass"
        else:

            Description = "Fail"
        conn.execute('insert into Student values ( ?, ?, ?, ?);',( Name, Course, Grade, Description))
conn.commit()
table = conn.execute('select * from Student order by Grade desc;')
print('Student list:')
print('Name'.ljust(15,' '), 'Course'.ljust(10,' '), 'Grade'.ljust(10,' '), 'Description'.ljust(10,' '))
for row in table:
    print(str(row[0]).ljust(15,' '), str(row[1]).ljust(10,' '),str(row[2]).ljust(10,' '),str(row[3]).ljust(10,' '))



